local SearchStation = {}
SearchStation.__index = SearchStation

local EventManager = require('EventManager')
local Section = require('Section')
local ShipBook = require('ShipBook')
local Ui = require('Ui')
local Utils = require('Utils')

SearchStation.STATION = '8d2a1c'
SearchStation.ARMORY_BAG = '29aea5'
SearchStation.GEAR_TOKENS_BAG = 'e9a291'

SearchStation.CLEANUP_TIMER = 10
SearchStation.HIDE_STORAGE_BAGS = true
-- SearchStation.current_wait_id = nil

------------------------------------------------------

function SearchStation.init()
    SearchStation.searching = false
    SearchStation.cleanup_search_timer = nil

    -- Create the upgrade buttons
    SearchStation.uiRoot = Ui.createRootOnObject('search-station-root', getObjectFromGUID(SearchStation.STATION), 0)
    SearchStation.uiRoot.scale = '0.25 0.25 0.25'

    local searchLayout = SearchStation.uiRoot:verticalLayout({
        id = 'search-station-layout', spacing = 10, width = 600, height = 125, z = -15, y = -120
    })

    -- Search button
    SearchStation.search_input = searchLayout:input({
        id = 'search-station-input', text = '', active = true, fontSize = 100,
        onValueChanged = function(_, text)
            -- if SearchStation.current_wait_id ~= nil then
            --     Wait.stop(SearchStation.current_wait_id)
            --     SearchStation.current_wait_id = nil
            -- end

            -- SearchStation.current_wait_id = Wait.time(function()
                -- SearchStation.displayResults(SearchStation.getResults(text))
                SearchStation.getResults(text)
            -- end, SearchStation.WAIT_TIMER)
        end
    })
    SearchStation.search_input.attributes.placeholder = ' '

    SearchStation.result_buttons = {}
    for i = 1, 5 do
        SearchStation.result_buttons[i] = SearchStation.uiRoot:button({
            id = 'result-station-button-' .. i, text = '', active = false, fontSize = 80, width = 1500,
            height = 90, z = -15, y = -130 - i * 25, colors = '#00000000|#00000088|#00000088|#00000000',
            textColor = '#dddddd', onClick = function() end
        })
    end
end


function SearchStation.pullElement(params)
    if not params or params.id:gsub('%s+', '') == '' then
        return
    end

    local searchStation = getObjectFromGUID(SearchStation.STATION)
    local cardTray = getObjectFromGUID(params.cardTrayGuid)
    local resultElement = cardTray.takeObject({
        position          = searchStation.getPosition() + Vector(0, 1, 0),
        smooth            = false,
        guid              = params.guid,
    })
    -- FIXME: some objects have the wrong rotation. Fix it to {0, 180, 0}?

    -- Get gear token
    if params.cardTrayGuid == SearchStation.ARMORY_BAG then
        local name = resultElement.getDescription()
        local gearBag = getObjectFromGUID(SearchStation.GEAR_TOKENS_BAG)

        for _, gearToken in ipairs(gearBag.getObjects()) do
            if gearToken.name == name then
                gearBag.takeObject({
                    position          = searchStation.getPosition() + Vector(0, 2, 0),
                    smooth            = false,
                    guid              = gearToken.guid,
                })
            end
        end
    end
    
    if not resultElement then
        broadcastToAll('Could not found any card with ID \'' .. params.id .. '\' in card tray \'' .. params.cardTrayGuid .. '\'', Color.Red)
    end
end

function SearchStation.getResults(searchTerm)
    if searchTerm:gsub('%s+', '') == '' then
        -- TODO: Hide all results
        return
    end

    SearchStation.searching = true

    if SearchStation.cleanup_search_timer ~= nil then
        Wait.stop(SearchStation.cleanup_search_timer)
        SearchStation.cleanup_search_timer = nil
    end

    -- Get top 5 results
    local results = {}

    -- Pull out the chapter bags first
    local bag = getObjectFromGUID(ShipBook.SHIPBOOK_BAG)
    for index, object in ipairs(bag.getObjects()) do
        if Utils.contains(object.tags, 'chapterBag') then
            bag.takeObject({
                position          = bag.getPosition() + Vector(0, 0, 2 * index),
                smooth            = false,
                guid              = object.guid,
                callback_function = function(chapterBag)
                    chapterBag.setLock(true)
                    chapterBag.attachInvisibleHider('hide', SearchStation.HIDE_STORAGE_BAGS)
                    chapterBag.getComponent('AudioSource').set('mute', SearchStation.HIDE_STORAGE_BAGS)
                end,
            })
        end
    end

    -- Pull out the card trays
    Wait.frames(function()
        for _, chapterBag in ipairs(getObjectsWithTag('chapterBag')) do
            local jndex = 1
            for _, subObject in ipairs(chapterBag.getObjects()) do
                if Utils.contains(subObject.tags, 'searchable') then
                    chapterBag.takeObject({
                        position          = chapterBag.getPosition() + Vector(2 * jndex, 0, 0),
                        smooth            = false,
                        guid              = subObject.guid,
                        callback_function = function(cardTray)
                            cardTray.setLock(true)
                            cardTray.attachInvisibleHider('hide', SearchStation.HIDE_STORAGE_BAGS)
                            cardTray.getComponent('AudioSource').set('mute', SearchStation.HIDE_STORAGE_BAGS)
                        end,
                    })

                    jndex = jndex + 1
                end
            end
        end

        -- For each searcheable card tray
        Wait.frames(function()
            for _, cardTray in ipairs(getObjectsWithTag('searchable')) do
                for _, finalObject in ipairs(cardTray.getObjects()) do
                    if finalObject.name:lower():find(searchTerm:lower()) then
                        if not Utils.contains(results, finalObject.name) then
                            table.insert(results, {
                                id = finalObject.name,
                                guid = finalObject.guid,
                                chapterGuid = ShipBook.getSearchableChapter(finalObject.guid),
                                cardTrayGuid = cardTray.getGUID(),
                            })
                        end
                    elseif finalObject.description:lower():find(searchTerm:lower()) then
                        if not Utils.contains(results, finalObject.description) then
                            table.insert(results, {
                                id = finalObject.description,
                                guid = finalObject.guid,
                                chapterGuid = ShipBook.getSearchableChapter(finalObject.guid),
                                cardTrayGuid = cardTray.getGUID()
                            })
                        end
                    end

                    if #results >= 5 then
                        SearchStation.cleanup_search_timer = Wait.time(function()
                            SearchStation.putAwaySearchables()
                        end, SearchStation.CLEANUP_TIMER)
                        SearchStation.displayResults(results)
                        return
                    end
                end
            end

            SearchStation.cleanup_search_timer = Wait.time(function()
                SearchStation.putAwaySearchables()
            end, SearchStation.CLEANUP_TIMER)
            SearchStation.displayResults(results)
        end, 1)
    end, 1)
end

function SearchStation.displayResults(results)
    if not results or #results == 0 then 
        for i = 1, #SearchStation.result_buttons do
            SearchStation.result_buttons[i]:setOnClick(nil)
            SearchStation.result_buttons[i]:setText('')
            SearchStation.result_buttons[i]:hide()
        end
    else
        -- Sort the results
        table.sort(results, function(l1, l2) return l1.id < l2.id end)

        -- Display the results
        for i = 1, math.min(#results, 5) do
            SearchStation.result_buttons[i]:setOnClick(function()
                if SearchStation.cleanup_search_timer then
                    Wait.stop(SearchStation.cleanup_search_timer)
                end
                SearchStation.displayResults({})
                SearchStation.search_input:setText('')
                SearchStation.pullElement(results[i])
                SearchStation.putAwaySearchables(false)
            end)
            -- Avoid the flickering effect of setText
            if SearchStation.result_buttons[i].attributes.active ~= true then
                SearchStation.result_buttons[i]:show()
            end

            -- Check if there's another result with the same name
            local used = false
            for _, element in ipairs(results) do
                if element.id == results[i].id and element.guid ~= results[i].guid then
                    used = true
                end
            end

            if used then
                SearchStation.result_buttons[i]:setText(results[i].id .. ' - ' .. getObjectFromGUID(results[i].cardTrayGuid).getName())
            else
                SearchStation.result_buttons[i]:setText(results[i].id)
            end
        end

        -- Reset the rest of the buttons
        for i = math.min(#results, 5) + 1, 5 do
            SearchStation.result_buttons[i]:setOnClick(nil)
            SearchStation.result_buttons[i]:setText(nil)
            SearchStation.result_buttons[i]:hide()
        end
    end
end

function SearchStation.putAwaySearchables(updateDisplayResults)
    if updateDisplayResults then 
        SearchStation.displayResults()
    end

    -- Put each tray in its chapter bag
    -- This should handle the cases where you move a card tray to a different chapter
    for _, object in pairs(getObjectsWithTag('searchable')) do
        local _, chapterBag = ShipBook.getSearchableChapter(object.getGUID())

        -- Some searchables don't go into chapter bags
        if chapterBag then
            chapterBag.putObject(object)
        end
    end

    -- Put each chapter bag in the ship book bag
    local shipbook = getObjectFromGUID(ShipBook.SHIPBOOK_BAG)
    for _, chapterBag in pairs(getObjectsWithTag('chapterBag')) do
        if chapterBag.getName() ~= ShipBook.getCurrentChapter() then
            shipbook.putObject(chapterBag)
        end
    end

    -- Once everything has been put back, end the search
    SearchStation.searching = false
end

function SearchStation.swapNameDescription(container, object)
    if (container.getGUID() == '29aea5' or container.getGUID() == '3aea33') and object.type == 'Card' then
        local tempName = object.getName()
        object.setName(object.getDescription())
        object.setDescription(tempName)
    end
    return true
end

function SearchStation.save()

end

function SearchStation.isSearching()
    return SearchStation.searching
end

------------------------------------------------------

return {
    init = SearchStation.init,
    save = SearchStation.save,
    putAwaySearchables = SearchStation.putAwaySearchables,
    isSearching = SearchStation.isSearching,
}