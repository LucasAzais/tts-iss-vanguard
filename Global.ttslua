-- This project uses Benjamin-Dobell/luabundle git repo to organise this project

-- Naming conventions, hopefully that's understandable
-- Classes: PascalCase
-- Functions: camelCase
-- Global vars: underscore: CONSTANTS_LIKE_THIS and variables_like_this
-- Local vars: camelCase

-- TODO: Rename discoveries U01, U02, ...
-- TODO: Ship book page 24 -> add to the planetary exploration?
-- TODO: Resize mission cards
-- TODO: Lead bag -> should be random!
-- TODO: Same for event (+ move the stack???)
-- TODO: Rank up cards might be too big (cf lander board slot)

-- TODO: Consider hiding the ShipBook elements while they load

-- TODO: Fix card size (section cards in particular) + tutorial cards size and order (unique discovery, mission etc...)

-- TODO: Change upgrade station board
-- TODO: Change upgrade station icons (transparent?)

-- TODO: Add empty bridge cards tray

-- TODO: Search inside the ship book pls

local Constants = require('Constants')
local Cycle = require('Cycle')
local EventManager = require('EventManager')
local Exploration = require('Exploration')
local Log = require('Log')
local SearchStation = require('SearchStation')
local Section = require('Section')
local ShipBook = require('ShipBook')
local Ui = require('Ui')
local Utils = require('Utils')
local UpgradeStation = require('UpgradeStation')

-- book = {7.27, 1.00, 7.27}
-- 

------------------------------------------------------

local NOT_INTERACTABLE = {
    
}

function onLoad(script_state)
    math.randomseed(os.time())

    -- Disable non-interactable objects
    for _, objectGUID in ipairs(NOT_INTERACTABLE) do
        getObjectFromGUID(objectGUID).interactable = false
    end

    -- Parse save data
    local savedData = JSON.decode(script_state) or {}
    -- savedData = {}
    -- log(savedData)

    Log.init()
    Ui.init()
    ShipBook.init(savedData.ship_book or {})
    Exploration.init(savedData.exploration or {})
    Section.init(savedData.sections or {})
    UpgradeStation.init()
    Cycle.init(savedData.cycle or {})
    SearchStation.init()
    Ui.globalRefresh()
end

function onSave()
    local dataToSave = {}

    dataToSave.ship_book = ShipBook.save()
    dataToSave.exploration = Exploration.save()
    dataToSave.sections = Section.save()
    dataToSave.cycle = Cycle.save()

    return JSON.encode(dataToSave)
end

function prepareTableForSave()
    ShipBook.cleanupExistingChapter()
    Section.closeAllDrawers()
end

function loadState(params)
    if params and params.saved_state then
        broadcastToAll('Loading the save chest.', Color.Black)

        -- Reset the UI
        Ui.getRoot():fullWipe()

        -- Reset handlers
        EventManager.wipeHandlers('onObjectCollisionEnter')
        EventManager.wipeHandlers(EventManager.ON_CHAPTER_CLEANUP)

        -- Reload the game
        Wait.condition(function()
            onLoad(params.saved_state)
            broadcastToAll('Save loaded.', Color.Black)
        end, function()
            return not Ui.getRoot().object.UI.loading
        end)
    end
end