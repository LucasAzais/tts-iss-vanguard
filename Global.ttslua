-- This project uses Benjamin-Dobell/luabundle git repo to organise this project

-- Naming conventions, hopefully that's understandable
-- Classes: PascalCase
-- Functions: camelCase
-- Global vars: underscore: CONSTANTS_LIKE_THIS and variables_like_this
-- Local vars: camelCase

-- TODO: Make on screen UI for Command/Energy/Success/Penalty tokens
-- TODO: Available crew per section -> drawers
-- TODO: Consider hiding the ShipBook elements while they load
-- TODO: Change the order of the dice rows at the top of the table (red -> green -> blue)
-- FIXME: Change hand position to make it reachable teal = {-48.40, 3.43, -61.91}
-- TODO: Fix card size (section cards in particular) + tutorial cards size and order (unique discovery, mission etc...)
-- TODO: POI scale = {1.99, 1.00, 1.99}?
-- TODO: Implement save chest

local Constants = require('Constants')
local EventManager = require('EventManager')
local Log = require('Log')
local ShipBook = require('ShipBook')
local Ui = require('Ui')

------------------------------------------------------

local NOT_INTERACTABLE = {
    
}

function onLoad(script_state)
    math.randomseed(os.time())

    -- Disable non-interactable objects
    for _, objectGUID in ipairs(NOT_INTERACTABLE) do
        getObjectFromGUID(objectGUID).interactable = false
    end

    -- Parse save data
    local savedData = JSON.decode(script_state) or {}

    Log.init()
    Ui.init()
    ShipBook.init(savedData.ship_book or {})
    Ui.globalRefresh()
end

function onSave()
    local dataToSave = {}

    dataToSave.ship_book = ShipBook.save()

    return JSON.encode(dataToSave)
end

function prepareTableForSave()
    ShipBook.cleanupExistingChapter()
end

function loadState(params)
    if params and params.saved_state then
        broadcastToAll('Loading the save chest.', Color.Black)

        -- Reset the UI
        Ui.getRoot():fullWipe()

        -- Reset handlers
        EventManager.wipeHandlers('onObjectCollisionEnter')

        -- Reload the game
        Wait.condition(function()
            onLoad(params.saved_state)
            broadcastToAll('Save loaded.', Color.Black)
        end, function()
            return not Ui.getRoot().object.UI.loading
        end)
    end
end