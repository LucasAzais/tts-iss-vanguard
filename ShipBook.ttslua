local ShipBook = {}
ShipBook.__index = ShipBook

local Constants = require('Constants')
local EventManager = require('EventManager')
local Section = require('Section')
local Ui = require('Ui')

------------------------------------------------------

-- Use this to show/hide the various storage bags used for the ship book
ShipBook.HIDE_STORAGE_BAGS = false

ShipBook.SCANNER = 'f28bbd'
ShipBook.SHIPBOOK_ZONE = '9f8780'
ShipBook.SHIPBOOK_BAG = '71b8c3'
ShipBook.TEMPORARY_BAG_LOCATION = {-6.48, 1.30, 89.60}
-- TODO: Main board has a fixed position, is this a good idea or should it just be a default?
-- ShipBook.MAIN_BOARD_LOCATION = {-150.67, 1.30, 0}

ShipBook.RESUMING = 'Resuming'
ShipBook.BRIDGE = 'Bridge'
ShipBook.STARMAP = 'Starmap'
ShipBook.SHIP_FACILITIES = 'Ship Facilities'
ShipBook.RESEARCH = 'Research'
ShipBook.PRODUCTION = 'Production'
ShipBook.BARRACKS = 'Barracks'
ShipBook.SITUATION_ROOM = 'Situation Room'
ShipBook.HANGAR = 'Hangar'
ShipBook.EXPLORATION = 'Exploration'
ShipBook.LEAVING = 'Leaving'
ShipBook.DOCKING = 'Docking'
ShipBook.DEBRIEFING = 'Debriefing'
ShipBook.UNLOADING = 'Unloading'
ShipBook.MEDBAY = 'Medbay'
ShipBook.MEMORIAL_WALL = 'Memorial Wall'
ShipBook.SAVE_POINT = 'Save Point'

function ShipBook.init(savedData)
    -- Initialise the functions
    ShipBook.CHAPTERS = {
        [ShipBook.RESUMING] = {
            name = ShipBook.RESUMING,
            bag = 'db91b6',
            mainBoard = '484158',
            onSetup = ShipBook.setupResuming,
            order = 1
        },
        [ShipBook.BRIDGE] = {
            name = ShipBook.BRIDGE,
            bag = '30c2cd',
            mainBoard = '86fe9e',
            onSetup = ShipBook.setupBridge,
            order = 2
        },
        [ShipBook.STARMAP] = {
            name = ShipBook.STARMAP,
            bag = '69d1e2',
            mainBoard = 'c8509a',
            onSetup = ShipBook.setupStarmap,
            order = 3,
            cameraPosition = Vector(9, 0, 5)
        },
        [ShipBook.SHIP_FACILITIES] = {
            name = ShipBook.SHIP_FACILITIES,
            bag = 'b1c9d3',
            mainBoard = 'e14d2f',
            onSetup = ShipBook.setupShipFacilities,
            order = 4
        },
        [ShipBook.RESEARCH] = {
            name = ShipBook.RESEARCH,
            bag = 'd7b876',
            mainBoard = '71da58',
            onSetup = ShipBook.setupResearch,
            order = 5,
            cameraDistance = 32,
            cameraPosition = Vector(0, 0, 7)
        },
        [ShipBook.PRODUCTION] = {
            name = ShipBook.PRODUCTION,
            bag = 'fbb2d8',
            mainBoard = 'b07523',
            onSetup = ShipBook.setupProduction,
            order = 6,
            cameraDistance = 32,
            cameraPosition = Vector(0, 0, 5)
        },
        [ShipBook.BARRACKS] = {
            name = ShipBook.BARRACKS,
            bag = 'df3235',
            mainBoard = '7933f1',
            onSetup = ShipBook.setupBarracks,
            order = 7,
            cameraPosition = Vector(0, 0, 6)
        },
        [ShipBook.SITUATION_ROOM] = {
            name = ShipBook.SITUATION_ROOM,
            bag = '326323',
            mainBoard = '445b37',
            onSetup = ShipBook.setupSituationRoom,
            order = 8,
            cameraDistance = 29,
            cameraPosition = Vector(0, 0, 4.5)
        },
        [ShipBook.HANGAR] = {
            name = ShipBook.HANGAR,
            bag = '2a8d62',
            mainBoard = 'd7d7b6',
            onSetup = ShipBook.setupHangar,
            order = 9,
            cameraDistance = 32,
            cameraPosition = Vector(0, 0, 5)
        },
        [ShipBook.EXPLORATION] = {
            name = ShipBook.EXPLORATION,
            bag = 'cb471a',
            mainBoard = '45ae91',
            onSetup = ShipBook.setupExploration,
            order = 10,
            cameraDistance = 27,
            cameraPosition = Vector(10, 0, 1)
        },
        [ShipBook.LEAVING] = {
            name = ShipBook.LEAVING,
            bag = '345724',
            mainBoard = '6878a1',
            onSetup = ShipBook.setupLeaving,
            order = 11
        },
        [ShipBook.DOCKING] = {
            name = ShipBook.DOCKING,
            bag = 'ec3a25',
            mainBoard = '00db30',
            onSetup = ShipBook.setupDocking,
            order = 12
        },
        [ShipBook.DEBRIEFING] = {
            name = ShipBook.DEBRIEFING,
            bag = '70e171',
            mainBoard = 'd7d589',
            onSetup = ShipBook.setupDebriefing,
            order = 13
        },
        [ShipBook.UNLOADING] = {
            name = ShipBook.UNLOADING,
            bag = 'ff6615',
            mainBoard = '463cac',
            onSetup = ShipBook.setupUnloading,
            order = 14,
            cameraDistance = 38
        },
        [ShipBook.MEDBAY] = {
            name = ShipBook.MEDBAY,
            bag = '502344',
            mainBoard = 'f471ff',
            onSetup = ShipBook.setupMedbay,
            order = 15,
            cameraDistance = 40,
            cameraPosition = Vector(0.5, 0, 6)
        },
        [ShipBook.MEMORIAL_WALL] = {
            name = ShipBook.MEMORIAL_WALL,
            bag = '1e3897',
            mainBoard = 'dc2dfe',
            onSetup = ShipBook.setupMemorialWall,
            order = 16,
            cameraDistance = 38,
            cameraPosition = Vector(0.5, 0, 0)
        },
        [ShipBook.SAVE_POINT] = {
            name = ShipBook.SAVE_POINT,
            bag = '7e369a',
            mainBoard = '739049',
            onSetup = ShipBook.setupSavePoint,
            order = 17
        }
    }

    -- Current selected chapter (if any)
    ShipBook.current_chapter = savedData.current_chapter or nil

    -- Hide the chapter bags (visuals and sound)
    getObjectFromGUID(ShipBook.SHIPBOOK_BAG).attachInvisibleHider('hide', ShipBook.HIDE_STORAGE_BAGS)
    getObjectFromGUID(ShipBook.SHIPBOOK_BAG).getComponent("AudioSource").set('mute', ShipBook.HIDE_STORAGE_BAGS)
    if ShipBook.current_chapter and getObjectFromGUID(ShipBook.CHAPTERS[ShipBook.current_chapter].bag) then
        getObjectFromGUID(ShipBook.CHAPTERS[ShipBook.current_chapter].bag).attachInvisibleHider('hide', ShipBook.HIDE_STORAGE_BAGS)
        getObjectFromGUID(ShipBook.CHAPTERS[ShipBook.current_chapter].bag).getComponent("AudioSource").set('mute', ShipBook.HIDE_STORAGE_BAGS)
    end

    -- Add saved data to the CHAPTERS
    for name, chapter in pairs(ShipBook.CHAPTERS) do
        chapter.savedPositions = (savedData.saved_positions and savedData.saved_positions[name]) or {}
    end

    -- Specific initial binder setup
    if not savedData.saved_positions or not savedData.saved_positions[ShipBook.BRIDGE] then
        ShipBook.CHAPTERS[ShipBook.BRIDGE].savedPositions = {
            { guid = 'ff1938', position = {-5.59, 1.54, 8.96}, rotation = {0.00, 180.00, 180.00}, lock = false},
            { guid = '730497', position = {-1.71, 1.54, 8.99}, rotation = {0.00, 180.00, 180.00}, lock = false},
            { guid = 'efb2e3', position = {6.45, 1.54, 8.95}, rotation = {0.00, 0.00, 0.00}, lock = false},
            { guid = 'a66cd5', position = {-16.86, 1.52, 7.78}, rotation = {0.00, 180.00, 0.00}, lock = true},
            { guid = '598d9c', position = {-16.86, 1.51, 2.13}, rotation = {0.00, 0.00, 0.00}, lock = true},
            { guid = 'afad6d', position = {-12.57, 1.51, 2.13}, rotation = {0.00, 0.00, 0.00}, lock = true},
            -- binder tabs
            -- { guid = 'b33288', position = {-5.73, 1.62, 11.11}, rotation = {0.00, 180.00, 0.00}, lock = true, collision = false},
            -- { guid = '9cd276', position = {-1.76, 1.62, 11.11}, rotation = {0.00, 180.00, 0.00}, lock = true, collision = false},
            -- { guid = '11a0d4', position = {2.31, 1.62, 11.11}, rotation = {0.00, 180.00, 0.00}, lock = true, collision = false},
            -- { guid = '8232ea', position = {6.38, 1.62, 7.19}, rotation = {0.00, 180.00, 0.00}, lock = true, collision = false},

            -- { guid = 'f92ef3', position = {-5.72, 1.62, 5.13}, rotation = {0.00, 180.00, 0.00}, lock = true, collision = false},
            -- { guid = '5f4294', position = {-1.74, 1.62, 5.09}, rotation = {0.00, 180.00, 0.00}, lock = true, collision = false},
            -- { guid = 'd48d19', position = {2.30, 1.62, 5.08}, rotation = {0.00, 180.00, 0.00}, lock = true, collision = false},
            -- { guid = 'ae10e4', position = {6.37, 1.62, 5.06}, rotation = {0.00, 180.00, 0.00}, lock = true, collision = false},
            -- { guid = '6f8cae', position = {-5.75, 1.62, -0.91}, rotation = {0.00, 180.00, 0.00}, lock = true, collision = false},
            -- { guid = 'c03dbd', position = {-1.69, 1.62, -0.94}, rotation = {0.00, 180.00, 0.00}, lock = true, collision = false},
            -- { guid = 'ea7761', position = {2.31, 1.62, -0.95}, rotation = {0.00, 180.00, 0.00}, lock = true, collision = false},
            -- { guid = '75218a', position = {6.39, 1.62, -0.93}, rotation = {0.00, 180.00, 0.00}, lock = true, collision = false},
            -- { guid = '6532d5', position = {-5.73, 1.62, -6.95}, rotation = {0.00, 180.00, 0.00}, lock = true, collision = false},
            -- { guid = 'b5d151', position = {-1.75, 1.62, -6.96}, rotation = {0.00, 180.00, 0.00}, lock = true, collision = false},
            -- { guid = '333454', position = {2.27, 1.62, -6.97}, rotation = {0.00, 180.00, 0.00}, lock = true, collision = false},
            -- { guid = '19580b', position = {6.36, 1.62, -6.96}, rotation = {0.00, 180.00, 0.00}, lock = true, collision = false},

            -- { guid = '89b1b5', position = {10.54, 1.62, 11.12}, rotation = {0.00, 180.00, 0.00}, lock = true, collision = false},
            -- { guid = '87b7cb', position = {14.59, 1.62, 11.14}, rotation = {0.00, 180.00, 0.00}, lock = true, collision = false},
            -- { guid = 'e62fc2', position = {18.65, 1.62, 11.12}, rotation = {0.00, 180.00, 0.00}, lock = true, collision = false},
            -- { guid = '3c1726', position = {22.71, 1.62, 11.13}, rotation = {0.00, 180.00, 0.00}, lock = true, collision = false},
            -- { guid = '8385c2', position = {10.53, 1.62, 5.12}, rotation = {0.00, 180.00, 0.00}, lock = true, collision = false},
            -- { guid = '007f32', position = {14.58, 1.62, 5.11}, rotation = {0.00, 180.00, 0.00}, lock = true, collision = false},
            -- { guid = 'fd2595', position = {18.66, 1.62, 5.11}, rotation = {0.00, 180.00, 0.00}, lock = true, collision = false},
            -- { guid = '62f470', position = {22.70, 1.62, 5.13}, rotation = {0.00, 180.00, 0.00}, lock = true, collision = false},
            -- { guid = '6de338', position = {10.50, 1.62, -0.95}, rotation = {0.00, 180.00, 0.00}, lock = true, collision = false},
            -- { guid = '934ca1', position = {14.55, 1.62, -0.95}, rotation = {0.00, 180.00, 0.00}, lock = true, collision = false},
            -- { guid = '0f2666', position = {18.62, 1.62, -0.95}, rotation = {0.00, 180.00, 0.00}, lock = true, collision = false},
            -- { guid = '865d11', position = {22.69, 1.62, -0.93}, rotation = {0.00, 180.00, 0.00}, lock = true, collision = false},
            -- { guid = '0d68a6', position = {10.49, 1.62, -6.98}, rotation = {0.00, 180.00, 0.00}, lock = true, collision = false},
            -- { guid = '143fa7', position = {14.54, 1.62, -6.98}, rotation = {0.00, 180.00, 0.00}, lock = true, collision = false},
            -- { guid = 'be84fa', position = {18.62, 1.62, -6.95}, rotation = {0.00, 180.00, 0.00}, lock = true, collision = false},
            -- { guid = '20a13c', position = {22.73, 1.62, -6.96}, rotation = {0.00, 180.00, 0.00}, lock = true, collision = false},
        }
    end

    if not savedData.saved_positions or not savedData.saved_positions[ShipBook.STARMAP] then
        ShipBook.CHAPTERS[ShipBook.STARMAP].savedPositions = {
            { guid = '2a4403', position = {17.70, 1.48, 0.00}, rotation = {0.00, 180.00, 0.00}, lock = true},
            { guid = '0b11de', position = {0.00, 1.48, 15.11}, rotation = {0.00, 180.00, 0.00}, lock = true},
        }
    end

    if not savedData.saved_positions or not savedData.saved_positions[ShipBook.RESEARCH] then
        ShipBook.CHAPTERS[ShipBook.RESEARCH].savedPositions = {
            { guid = '23a032', position = {2.66, 1.54, 7.59}, rotation = {0.00, 180.00, 0.00}, lock = false},
            { guid = 'b49ff3', position = {-7.62, 1.47, 16.48}, rotation = {0.00, 180.00, 0.00}, lock = true},
        }
    end

    if not savedData.saved_positions or not savedData.saved_positions[ShipBook.PRODUCTION] then
        ShipBook.CHAPTERS[ShipBook.PRODUCTION].savedPositions = {
            { guid = '01f712', position = {-21.87, 1.47, 14.96}, rotation = {0.00, 180.00, 0.00}, lock = true},
            { guid = '5a53cb', position = {-7.53, 1.48, 14.37}, rotation = {0.00, 180.00, 0.00}, lock = true},
            { guid = 'ae6318', position = {-12.44, 1.54, 7.14}, rotation = {0.00, 180.00, 0.00}, lock = false},
            { guid = 'a6bc81', position = {-7.31, 1.54, 7.16}, rotation = {0.00, 180.00, 0.00}, lock = false},
            { guid = 'bdfc8a', position = {-2.22, 1.54, 7.20}, rotation = {0.00, 180.00, 0.00}, lock = false},
            { guid = 'cafdab', position = {-12.38, 1.54, 0.24}, rotation = {0.00, 180.00, 0.00}, lock = false},
        }
    end

    if not savedData.saved_positions or not savedData.saved_positions[ShipBook.BARRACKS] then
        ShipBook.CHAPTERS[ShipBook.BARRACKS].savedPositions = {
            { guid = 'de2813', position = {0.00, 1.47, 15.11}, rotation = {0.00, 180.00, 0.00}, lock = true},
        }
    end

    if not savedData.saved_positions or not savedData.saved_positions[ShipBook.SITUATION_ROOM] then
        ShipBook.CHAPTERS[ShipBook.SITUATION_ROOM].savedPositions = {
            { guid = '87baa6', position = {-3.67, 1.48, 15.05}, rotation = {0.00, 180.00, 0.00}, lock = true},
            { guid = '94c459', position = {3.86, 1.48, 15.05}, rotation = {0.00, 180.00, 0.00}, lock = true},
        }
    end

    if not savedData.saved_positions or not savedData.saved_positions[ShipBook.HANGAR] then
        ShipBook.CHAPTERS[ShipBook.HANGAR].savedPositions = {
            { guid = '518745', position = {-11.30, 1.52, 7.29}, rotation = {0.00, 180.00, 0.00}, lock = true},
            { guid = '5375ed', position = {-5.07, 1.54, 7.18}, rotation = {0.00, 180.00, 0.00}, lock = false},
            { guid = '167cc3', position = {-5.00, 1.58, 0.48}, rotation = {0.00, 180.00, 0.00}, lock = false},
            { guid = '0635c5', position = {-22.19, 1.10, 16.02}, rotation = {0.00, 180.00, 0.00}, lock = true},
            { guid = '0dc95c', position = {-16.55, 1.10, 16.02}, rotation = {0.00, 180.00, 0.00}, lock = true},
            { guid = 'd51b21', position = {-10.69, 1.10, 16.02}, rotation = {0.00, 180.00, 0.00}, lock = true},
        }
    end

    if not savedData.saved_positions or not savedData.saved_positions[ShipBook.EXPLORATION] then
        ShipBook.CHAPTERS[ShipBook.EXPLORATION].savedPositions = {
            { guid = '4f8aff', position = {-19.60, 1.48, 0.00}, rotation = {0.00, 180.00, 0.00}, lock = true},
        }
    end

    if not savedData.saved_positions or not savedData.saved_positions[ShipBook.UNLOADING] then
        ShipBook.CHAPTERS[ShipBook.UNLOADING].savedPositions = {
            { guid = '7e55a9', position = {-39.76, 1.47, 7.37}, rotation = {0.00, 180.00, 0.00}, lock = true},
        }
    end

    if not savedData.saved_positions or not savedData.saved_positions[ShipBook.MEDBAY] then
        ShipBook.CHAPTERS[ShipBook.MEDBAY].savedPositions = {
            { guid = '6ab452', position = {-23.15, 1.47, 20.62}, rotation = {0.00, 180.00, 0.00}, lock = true},
        }
    end

    -- Initialise the UI
    local shipbookBag = getObjectFromGUID(ShipBook.SHIPBOOK_BAG)

    if not shipbookBag then
        broadcastToColor('Could not find the Ship Book bag with ID ' .. ShipBook.SHIPBOOK_BAG, Color.Red)
        return
    end

    assert(Ui.getRoot() ~= nil)

    ShipBook.toggle_button = Ui.getRoot():button({
        id = 'ship-book-menu-toggle', height = 40, width = 40, rectAlignment = 'UpperRight', x = 0, y = -200, onClick = function() ShipBook.expandMenu() end,
        active = false
    })
    ShipBook.toggle_button.attributes.icon = 'ExpandButton'
    -- ShipBook.toggle_button.attributes.allowDragging = true
    -- ShipBook.toggle_button.attributes.returnToOriginalPositionWhenReleased = false

    -- Background panel/image
    ShipBook.menu_image = Ui.getRoot():panel({
        id = 'ship-book-cycle-panel', height = 700, width = 100, active = false, x = 12, y = -240, rectAlignment = 'UpperRight'
    })
    ShipBook.menu_image:image({
        id = 'ship-book-cycle-image', image = 'ship-book-cycle'
    })

    -- Buttons layout
    ShipBook.menu_layout = Ui.getRoot():verticalLayout({
        id = 'ship-book-menu-layout', height = 685, width = 78, spacing = 5, rectAlignment = 'UpperRight', x = 0, y = -247, active = false
    })
    ShipBook.menu_layout.attributes.showAnimation = 'SlideIn_Right'
    ShipBook.menu_layout.attributes.hideAnimation = 'SlideOut_Right'

    -- Reorder chapters
    local orderedChapters = {}
    for k, v in pairs(ShipBook.CHAPTERS) do table.insert(orderedChapters, k) end
    table.sort(orderedChapters, function(l1, l2) return ShipBook.CHAPTERS[l1].order < ShipBook.CHAPTERS[l2].order end)

    for index, name in pairs(orderedChapters) do
        local button = ShipBook.menu_layout:button({
            id = ShipBook.CHAPTERS[name].name .. '-button',
            onClick = function() 
                ShipBook.globalSetup(name)
                ShipBook.CHAPTERS[name].onSetup() 
            end
        })
        button.attributes.colors = '#00000000|#1C1C1C60|#0C0C0C60|rgba(0,0,0,0)'
    end

    -- Various object events
    -- Starmap Scanner
    EventManager.addHandler('onObjectCollisionEnter', ShipBook.setupScannerCard)

    -- Resting Crew button
    local button = Ui.getRoot():button({
        id = 'resting-crew-button', onClick = function() Section.readyAllCrew() end, 
        height = 40, width = 90, text = 'Rest Crew', rectAlignment = 'UpperRight', x = -90, y = -690,
        active = false
    })

    -- TODO: Remove this once done
    -- Ui.getRoot():button({
    --     id = 'save-state', height = 50, width = 100, rectAlignment = 'UpperLeft', x = 100, y = -10, 
    --     text = 'Camera Pos', fontSize = 30, onClick = function() log(Player.getPlayers()[1].camera) end
    -- })
end

function ShipBook.expandMenu()
    ShipBook.toggle_button:setIcon('CollapseButton')
    ShipBook.toggle_button:setOnClick(function() ShipBook.collapseMenu() end)

    -- Display vertical menu
    ShipBook.menu_layout:show()
    ShipBook.menu_image:show()

    -- Resting crew button
    if ShipBook.current_chapter == ShipBook.DOCKING then
        Ui.getRoot():show('resting-crew-button')
    end
end

function ShipBook.collapseMenu()
    ShipBook.toggle_button:setIcon('ExpandButton')
    ShipBook.toggle_button:setOnClick(function() ShipBook.expandMenu() end)

    -- Hide vertical menu
    ShipBook.menu_layout:hide()
    ShipBook.menu_image:hide()
    Ui.getRoot():hide('resting-crew-button')
end

function ShipBook.cleanupExistingChapter()
    -- TODO: Possibly move this into separate setup/cleanup functions?
    if getObjectFromGUID(ShipBook.SCANNER) then
        getObjectFromGUID(ShipBook.SCANNER).unregisterCollisions()
    end

    Ui.getRoot():hide('resting-crew-button')

    -- Put the chapter stuff into the bags
    local chapterBag = ShipBook.current_chapter and getObjectFromGUID(ShipBook.CHAPTERS[ShipBook.current_chapter].bag)
    if chapterBag then
        local mainBoard = getObjectFromGUID(ShipBook.CHAPTERS[ShipBook.current_chapter].mainBoard)

        -- Reset collision
        -- for _, object in ipairs(ShipBook.CHAPTERS[ShipBook.current_chapter].savedPositions) do
        --     if object.collision == false then
        --         getObjectFromGUID(object.guid).getComponent('RigidBody').set('detectCollisions', true)
        --     end
        -- end

        ShipBook.CHAPTERS[ShipBook.current_chapter].savedPositions = {}

        for _, object in ipairs(getObjectFromGUID(ShipBook.SHIPBOOK_ZONE).getObjects()) do
            if object.getGUID() ~= Constants.TABLE_GUID then
                -- Save the GUID and position of all objects (except the main board) 
                if object.getGUID() ~= ShipBook.CHAPTERS[ShipBook.current_chapter].mainBoard then
                    table.insert(ShipBook.CHAPTERS[ShipBook.current_chapter].savedPositions, {
                        guid = object.getGUID(),
                        -- Is it a good idea?
                        -- HACK: Can also use mainBoard.positionToLocal() to save it relative to the main board.
                        position = object.getPosition(),
                        rotation = (object.getGUID()==ShipBook.SCANNER and {0.00, 180.00, 0.00}) or object.getRotation(),
                        lock = object.getLock(),
                        -- collision = object.getComponent('RigidBody').get('detectCollisions')
                    })
                end

                -- Put the object away
                object.attachInvisibleHider('hide', true)
                chapterBag.putObject(object)
            end
        end

        -- Then put the chapter bag into the shipbook bag
        getObjectFromGUID(ShipBook.SHIPBOOK_BAG).putObject(chapterBag)
    end
end

function ShipBook.globalSetup(chapter)
    if ShipBook.current_chapter == chapter then return end

    -- Hide existing bags
    ShipBook.cleanupExistingChapter()

    -- Change the chapter and get the bag
    ShipBook.current_chapter = chapter

    local shipbookBag = getObjectFromGUID(ShipBook.SHIPBOOK_BAG)
    local chapterBag = shipbookBag.takeObject({
        position          = ShipBook.TEMPORARY_BAG_LOCATION,
        callback_function = function(obj) obj.setLock(true) end,
        smooth            = false,
        guid              = ShipBook.CHAPTERS[chapter].bag,
    })

    chapterBag.attachInvisibleHider('hide', ShipBook.HIDE_STORAGE_BAGS)
    chapterBag.getComponent("AudioSource").set('mute', ShipBook.HIDE_STORAGE_BAGS)

    if ShipBook.CHAPTERS[chapter].mainBoard ~= '' then
        local mainBoard = chapterBag.takeObject({
            position          = getObjectFromGUID(ShipBook.SHIPBOOK_ZONE).getPosition(),
            rotation          = {0, 180, 0},
            -- TODO: Consider adding obj.interactable = false, but you can't ALT zoom anymore...
            callback_function = function(obj) obj.setLock(true) end,
            smooth            = false,
            guid              = ShipBook.CHAPTERS[chapter].mainBoard,
        })

        for _, saved in ipairs(ShipBook.CHAPTERS[chapter].savedPositions) do
            chapterBag.takeObject({
                -- HACK: Can also use mainBoard.positionToWorld() to save it relative to the main board.
                position          = saved.position,
                rotation          = saved.rotation,
                callback_function = function(obj)
                    obj.setLock(saved.lock)
                    if saved.collision == false then
                        -- obj.getComponent('RigidBody').set('detectCollisions', false)
                    end
                end,
                smooth            = false,
                guid              = saved.guid,
            })
        end

        -- Move the camera to the main board
        -- for _, player in ipairs(Player.getPlayers()) do
        --     player.lookAt({ position = mainBoard.getPosition() + (ShipBook.CHAPTERS[chapter].cameraPosition or Vector(0, 0, 0)), 
        --             pitch = 90, distance = ShipBook.CHAPTERS[chapter].cameraDistance or 30 })
        -- end
    end
end

function ShipBook.setupResuming()
end

function ShipBook.setupBridge()
end

function ShipBook.setupStarmap()
    getObjectFromGUID(ShipBook.SCANNER).registerCollisions()
end

function ShipBook.setupShipFacilities()
end

function ShipBook.setupResearch()
end

function ShipBook.setupProduction()
end

function ShipBook.setupBarracks()
end

function ShipBook.setupSituationRoom()
end

function ShipBook.setupHangar()
end

function ShipBook.setupExploration()
end

function ShipBook.setupLeaving()
end

function ShipBook.setupDocking()
    Ui.getRoot():show('resting-crew-button')
end

function ShipBook.setupDebriefing()
end

function ShipBook.setupUnloading()
end

function ShipBook.setupMedbay()
end

function ShipBook.setupMemorialWall()
end

function ShipBook.setupSavePoint()
end

-- pos1 = +0.63
-- pos2 = +1.92
-- pos3 = +3.24
-- pos4 = +5.19
function ShipBook.setupScannerCard(registered_object, info)
    if info.collision_object.hasTag('landingCard') and registered_object.getGUID() == ShipBook.SCANNER 
        and not ShipBook.scanner_in_use then
        log('Setting up the scanner.')

        ShipBook.scanner_in_use = 1
        local cardDeltas = {
            0.63,
            1.92,
            3.24,
            5.19
        }

        registered_object.setRotation({0.00, 180.00, 0.00})
        info.collision_object.setLock(true)
        info.collision_object.setRotationSmooth({0.00, 180.00, 0.00})

        local position = Vector(registered_object.getPosition())
        position.y = position.y - 0.02
        position.z = position.z + cardDeltas[ShipBook.scanner_in_use]
        info.collision_object.setPositionSmooth(position)

        registered_object.createButton({
            click_function = 'nextScannerStep',
            function_owner = self,
            label          = 'Scan',
            position       = {-1, 0.2, 1.5},
            scale          = {1/registered_object.getScale().x, 1/registered_object.getScale().y, 1/registered_object.getScale().z},
            width          = 900,
            height         = 350,
            font_size      = 280,
        })

        registered_object.createButton({
            click_function = 'revealScanner',
            function_owner = self,
            label          = 'Reveal',
            position       = {1, 0.2, 1.5},
            scale          = {1/registered_object.getScale().x, 1/registered_object.getScale().y, 1/registered_object.getScale().z},
            width          = 1000,
            height         = 350,
            font_size      = 280,
        })

        Global.setVar('nextScannerStep', function(obj)
            if ShipBook.scanner_in_use < #cardDeltas then
                ShipBook.scanner_in_use = ShipBook.scanner_in_use + 1

                local position = Vector(registered_object.getPosition())
                position.y = position.y - 0.02
                position.z = position.z + cardDeltas[ShipBook.scanner_in_use]
                info.collision_object.setPositionSmooth(position)
            end
        end)

        Global.setVar('revealScanner', function(obj)
            registered_object.setRotation({0.00, 180.00, 180.00})
            registered_object.clearButtons()

            info.collision_object.setRotation({0.00, 180.00, 180.00})
            info.collision_object.setLock(false)
            ShipBook.scanner_in_use = nil
            getObjectFromGUID(ShipBook.SCANNER).unregisterCollisions()
        end)
    end
end

function ShipBook.startPhase()
    ShipBook.toggle_button:show()
    ShipBook.expandMenu()
end

function ShipBook.endPhase()
    ShipBook.cleanupExistingChapter()
    ShipBook.collapseMenu()
    ShipBook.toggle_button:hide()
end

function ShipBook.save()
    local flatData = {
        saved_positions = {},
        scanner_in_use = ShipBook.scanner_in_use,
        current_chapter = ShipBook.current_chapter,
    }

    for name, chapter in pairs(ShipBook.CHAPTERS) do
        flatData.saved_positions[name] = chapter.savedPositions
    end

    return flatData
end

------------------------------------------------------

return {
    init = ShipBook.init,
    save = ShipBook.save,
    cleanupExistingChapter = ShipBook.cleanupExistingChapter,
    startPhase = ShipBook.startPhase,
    endPhase = ShipBook.endPhase,
}