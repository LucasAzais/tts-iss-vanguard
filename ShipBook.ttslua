local ShipBook = {}
ShipBook.__index = ShipBook

local Constants = require('Constants')
local EventManager = require('EventManager')
local Ui = require('Ui')

------------------------------------------------------

-- Use this to show/hide the various storage bags used for the ship book
ShipBook.HIDE_STORAGE_BAGS = false

ShipBook.SCANNER = 'f28bbd'
ShipBook.SHIPBOOK_ZONE = '9f8780'
ShipBook.SHIPBOOK_BAG = '71b8c3'
ShipBook.TEMPORARY_BAG_LOCATION = {-6.48, 1.30, 89.60}
-- TODO: Main board has a fixed position, is this a good idea or should it just be a default?
ShipBook.MAIN_BOARD_LOCATION = {-150.67, 1.30, 0}

ShipBook.RESUMING = 'Resuming'
ShipBook.BRIDGE = 'Bridge'
ShipBook.STARMAP = 'Starmap'
ShipBook.SHIP_FACILITIES = 'Ship Facilities'
ShipBook.RESEARCH = 'Research'
ShipBook.PRODUCTION = 'Production'
ShipBook.BARRACKS = 'Barracks'
ShipBook.SITUATION_ROOM = 'Situation Room'
ShipBook.HANGAR = 'Hangar'
ShipBook.EXPLORATION = 'Exploration'
ShipBook.LEAVING = 'Leaving'
ShipBook.DOCKING = 'Docking'
ShipBook.DEBRIEFING = 'Debriefing'
ShipBook.UNLOADING = 'Unloading'
ShipBook.MEDBAY = 'Medbay'
ShipBook.MEMORIAL_WALL = 'Memorial Wall'
ShipBook.SAVE_POINT = 'Save Point'

function ShipBook.init(savedData)
    -- Hide the chapter bag (visuals and sound)
    getObjectFromGUID(ShipBook.SHIPBOOK_BAG).attachInvisibleHider('hide', ShipBook.HIDE_STORAGE_BAGS)
    getObjectFromGUID(ShipBook.SHIPBOOK_BAG).getComponent("AudioSource").set('mute', ShipBook.HIDE_STORAGE_BAGS)

    -- Initialise the functions
    ShipBook.CHAPTERS = {
        [ShipBook.RESUMING] = {
            name = ShipBook.RESUMING,
            bag = 'db91b6',
            mainBoard = '484158',
            onSetup = ShipBook.setupResuming,
            order = 1
        },
        [ShipBook.BRIDGE] = {
            name = ShipBook.BRIDGE,
            bag = '30c2cd',
            mainBoard = '86fe9e',
            onSetup = ShipBook.setupBridge,
            order = 2
        },
        [ShipBook.STARMAP] = {
            name = ShipBook.STARMAP,
            bag = '69d1e2',
            mainBoard = 'c8509a',
            onSetup = ShipBook.setupStarmap,
            order = 3
        },
        [ShipBook.SHIP_FACILITIES] = {
            name = ShipBook.SHIP_FACILITIES,
            bag = 'b1c9d3',
            mainBoard = 'e14d2f',
            onSetup = ShipBook.setupShipFacilities,
            order = 4
        },
        [ShipBook.RESEARCH] = {
            name = ShipBook.RESEARCH,
            bag = 'd7b876',
            mainBoard = '71da58',
            onSetup = ShipBook.setupResearch,
            order = 5
        },
        [ShipBook.PRODUCTION] = {
            name = ShipBook.PRODUCTION,
            bag = 'fbb2d8',
            mainBoard = 'b07523',
            onSetup = ShipBook.setupProduction,
            order = 6,
            cameraDistance = 32
        },
        [ShipBook.BARRACKS] = {
            name = ShipBook.BARRACKS,
            bag = 'df3235',
            mainBoard = '7933f1',
            onSetup = ShipBook.setupBarracks,
            order = 7
        },
        [ShipBook.SITUATION_ROOM] = {
            name = ShipBook.SITUATION_ROOM,
            bag = '326323',
            mainBoard = '445b37',
            onSetup = ShipBook.setupSituationRoom,
            order = 8
        },
        [ShipBook.HANGAR] = {
            name = ShipBook.HANGAR,
            bag = '2a8d62',
            mainBoard = 'd7d7b6',
            onSetup = ShipBook.setupHangar,
            order = 9
        },
        [ShipBook.EXPLORATION] = {
            name = ShipBook.EXPLORATION,
            bag = 'cb471a',
            mainBoard = '45ae91',
            onSetup = ShipBook.setupExploration,
            order = 10
        },
        [ShipBook.LEAVING] = {
            name = ShipBook.LEAVING,
            bag = '345724',
            mainBoard = '6878a1',
            onSetup = ShipBook.setupLeaving,
            order = 11
        },
        [ShipBook.DOCKING] = {
            name = ShipBook.DOCKING,
            bag = 'ec3a25',
            mainBoard = '00db30',
            onSetup = ShipBook.setupDocking,
            order = 12
        },
        [ShipBook.DEBRIEFING] = {
            name = ShipBook.DEBRIEFING,
            bag = '70e171',
            mainBoard = 'd7d589',
            onSetup = ShipBook.setupDebriefing,
            order = 13
        },
        [ShipBook.UNLOADING] = {
            name = ShipBook.UNLOADING,
            bag = 'ff6615',
            mainBoard = '463cac',
            onSetup = ShipBook.setupUnloading,
            order = 14,
            cameraDistance = 38
        },
        [ShipBook.MEDBAY] = {
            name = ShipBook.MEDBAY,
            bag = '502344',
            mainBoard = 'f471ff',
            onSetup = ShipBook.setupMedbay,
            order = 15,
            cameraDistance = 38
        },
        [ShipBook.MEMORIAL_WALL] = {
            name = ShipBook.MEMORIAL_WALL,
            bag = '1e3897',
            mainBoard = 'dc2dfe',
            onSetup = ShipBook.setupMemorialWall,
            order = 16,
            cameraDistance = 38
        },
        [ShipBook.SAVE_POINT] = {
            name = ShipBook.SAVE_POINT,
            bag = '7e369a',
            mainBoard = '739049',
            onSetup = ShipBook.setupSavePoint,
            order = 17
        }
    }

    -- Add saved data to the CHAPTERS
    for name, chapter in pairs(ShipBook.CHAPTERS) do
        chapter.savedPositions = savedData[name] or {}
    end

    -- Specific initial binder setup
    if not savedData[ShipBook.BRIDGE] then
        ShipBook.CHAPTERS[ShipBook.BRIDGE].savedPositions = {
            { guid = 'ff1938', position = {-156.26, 1.36, 8.96}, rotation = {0.00, 180.00, 180.00}, lock = false},
            { guid = '730497', position = {-148.28, 1.36, 8.91}, rotation = {0.00, 180.00, 180.00}, lock = false},
            { guid = 'efb2e3', position = {-144.22, 1.36, 8.95}, rotation = {0.00, 0.00, 0.00}, lock = false},
            { guid = 'a66cd5', position = {-167.69, 1.34, 7.77}, rotation = {0.00, 180.00, 0.00}, lock = true},
            { guid = '598d9c', position = {-167.69, 1.33, 2.21}, rotation = {0.00, 0.00, 0.00}, lock = true},
            { guid = 'afad6d', position = {-164.01, 1.33, 2.21}, rotation = {0.00, 0.00, 0.00}, lock = true}
        }
    end

    if not savedData[ShipBook.STARMAP] then
        ShipBook.CHAPTERS[ShipBook.STARMAP].savedPositions = {
            { guid = '2a4403', position = {-132.07, 1.30, 0.00}, rotation = {0.00, 180.00, 0.00}, lock = true},
            { guid = '0b11de', position = {-150.67, 1.00, 16.37}, rotation = {0.00, 180.00, 0.00}, lock = true},
            { guid = ShipBook.SCANNER, position = {-145.53, 1.55, 3.28}, rotation = {0.00, 180.00, 0.00}, lock = true},
        }
    end

    if not savedData[ShipBook.RESEARCH] then
        ShipBook.CHAPTERS[ShipBook.RESEARCH].savedPositions = {
            { guid = '23a032', position = {-148.01, 1.36, 7.59}, rotation = {0.00, 180.00, 0.00}, lock = false},
            { guid = 'b49ff3', position = {-150.67, 1.00, 17.52}, rotation = {0.00, 180.00, 0.00}, lock = true},
        }
    end

    if not savedData[ShipBook.PRODUCTION] then
        ShipBook.CHAPTERS[ShipBook.PRODUCTION].savedPositions = {
            { guid = '01f712', position = {-171.02, 1.21, 15.85}, rotation = {0.00, 180.00, 0.00}, lock = true},
            { guid = '5a53cb', position = {-160.52, 1.22, 15.90}, rotation = {0.00, 180.00, 0.00}, lock = true},
            { guid = 'ae6318', position = {-163.11, 1.36, 7.14}, rotation = {0.00, 180.00, 0.00}, lock = false},
            { guid = 'a6bc81', position = {-157.98, 1.36, 7.16}, rotation = {0.00, 180.00, 0.00}, lock = false},
            { guid = 'bdfc8a', position = {-152.89, 1.36, 7.20}, rotation = {0.00, 180.00, 0.00}, lock = false},
            { guid = 'cafdab', position = {-163.05, 1.36, 0.24}, rotation = {0.00, 180.00, 0.00}, lock = false},
        }
    end

    if not savedData[ShipBook.BARRACKS] then
        ShipBook.CHAPTERS[ShipBook.BARRACKS].savedPositions = {
            { guid = 'de2813', position = {-150.67, 1.00, 16.73}, rotation = {0.00, 180.00, 0.00}, lock = true},
        }
    end

    if not savedData[ShipBook.SITUATION_ROOM] then
        ShipBook.CHAPTERS[ShipBook.SITUATION_ROOM].savedPositions = {
            { guid = '87baa6', position = {-154.29, 1.22, 15.09}, rotation = {0.00, 180.00, 0.00}, lock = true},
            { guid = '94c459', position = {-146.73, 1.22, 15.09}, rotation = {0.00, 180.00, 0.00}, lock = true},
        }
    end

    if not savedData[ShipBook.HANGAR] then
        ShipBook.CHAPTERS[ShipBook.HANGAR].savedPositions = {
            { guid = '518745', position = {-161.61, 1.34, 7.76}, rotation = {0.00, 180.00, 0.00}, lock = true},
            { guid = '5375ed', position = {-155.77, 1.36, 7.18}, rotation = {0.00, 180.00, 0.00}, lock = false},
            { guid = '167cc3', position = {-155.73, 1.40, 0.44}, rotation = {0.00, 180.00, 0.00}, lock = false},
            { guid = '0635c5', position = {-158.03, 0.40, 16.69}, rotation = {0.00, 180.00, 0.00}, lock = true},
            { guid = '0dc95c', position = {-150.67, 0.40, 16.68}, rotation = {0.00, 180.00, 0.00}, lock = true},
            { guid = 'd51b21', position = {-143.31, 0.40, 16.68}, rotation = {0.00, 180.00, 0.00}, lock = true},
        }
    end

    if not savedData[ShipBook.EXPLORATION] then
        ShipBook.CHAPTERS[ShipBook.EXPLORATION].savedPositions = {
            { guid = '4f8aff', position = {-131.42, 1.30, 0.00}, rotation = {0.00, 180.00, 0.00}, lock = true},
        }
    end

    if not savedData[ShipBook.UNLOADING] then
        ShipBook.CHAPTERS[ShipBook.UNLOADING].savedPositions = {
            { guid = '7e55a9', position = {-181.26, 1.34, 5.30}, rotation = {0.00, 180.00, 0.00}, lock = true},
        }
    end

    if not savedData[ShipBook.MEDBAY] then
        ShipBook.CHAPTERS[ShipBook.MEDBAY].savedPositions = {
            { guid = '6ab452', position = {-150.67, 1.00, 21.48}, rotation = {0.00, 180.00, 0.00}, lock = true},
        }
    end

    -- Initialise the UI
    local shipbookBag = getObjectFromGUID(ShipBook.SHIPBOOK_BAG)

    if not shipbookBag then
        broadcastToColor('Could not find the chapters bag with ID ' .. ShipBook.SHIPBOOK_BAG, Color.Red)
        return
    end

    assert(Ui.getRoot() ~= nil)

    ShipBook.toggle_button = Ui.getRoot():button({
        id = 'ship-book-menu-toggle', height = 40, width = 40, rectAlignment = 'UpperRight', x = -10, y = -200, onClick = function() ShipBook.expandMenu() end
    })
    ShipBook.toggle_button.attributes.icon = 'ExpandButton'
    ShipBook.toggle_button.attributes.allowDragging = true
    ShipBook.toggle_button.attributes.returnToOriginalPositionWhenReleased = false

    ShipBook.menu_layout = Ui.getRoot():verticalLayout({
        id = 'ship-book-menu-layout', height = 600, width = 130, spacing = 10, rectAlignment = 'UpperRight', x = -10, y = -250, active = false
    })
    ShipBook.menu_layout.attributes.showAnimation = 'SlideIn_Right'
    ShipBook.menu_layout.attributes.hideAnimation = 'SlideOut_Right'

    -- Reorder chapters
    local orderedChapters = {}
    for k, v in pairs(ShipBook.CHAPTERS) do table.insert(orderedChapters, k) end
    table.sort(orderedChapters, function(l1, l2) return ShipBook.CHAPTERS[l1].order < ShipBook.CHAPTERS[l2].order end)

    for index, name in pairs(orderedChapters) do
        local button = ShipBook.menu_layout:button({
            id = ShipBook.CHAPTERS[name].name .. '-button', text = ShipBook.CHAPTERS[name].name, fontSize = 20,
            onClick = function() 
                ShipBook.globalSetup(name)
                ShipBook.CHAPTERS[name].onSetup() 
            end
        })
    end

    -- Various object events
    -- Starmap Scanner
    EventManager.addHandler('onObjectCollisionEnter', ShipBook.setupScannerCard)
end

function ShipBook.expandMenu()
    ShipBook.toggle_button:setIcon('CollapseButton')
    ShipBook.toggle_button:setOnClick(function() ShipBook.collapseMenu() end)

    -- Display vertical menu
    ShipBook.menu_layout:show()
end

function ShipBook.collapseMenu()
    ShipBook.toggle_button:setIcon('ExpandButton')
    ShipBook.toggle_button:setOnClick(function() ShipBook.expandMenu() end)

    -- Hide vertical menu
    ShipBook.menu_layout:hide()
end

function ShipBook.cleanupExistingChapter()
    -- TODO: Possibly move this into separate setup/cleanup functions?
    if getObjectFromGUID(ShipBook.SCANNER) then
        getObjectFromGUID(ShipBook.SCANNER).unregisterCollisions()
    end

    -- Put the chapter stuff into the bags
    local chapterBag = ShipBook.current_chapter and getObjectFromGUID(ShipBook.CHAPTERS[ShipBook.current_chapter].bag)
    if chapterBag then
        local mainBoard = getObjectFromGUID(ShipBook.CHAPTERS[ShipBook.current_chapter].mainBoard)

        ShipBook.CHAPTERS[ShipBook.current_chapter].savedPositions = {}

        for _, object in ipairs(getObjectFromGUID(ShipBook.SHIPBOOK_ZONE).getObjects()) do
            -- Save the GUID and position of all objects (except the main board) 
            if object.getGUID() ~= ShipBook.CHAPTERS[ShipBook.current_chapter].mainBoard then
                table.insert(ShipBook.CHAPTERS[ShipBook.current_chapter].savedPositions, {
                    guid = object.getGUID(),
                    -- Is it a good idea?
                    -- HACK: Can also use mainBoard.positionToLocal() to save it relative to the main board.
                    position = object.getPosition(),
                    rotation = (object.getGUID()==ShipBook.SCANNER and {0.00, 180.00, 0.00}) or object.getRotation(),
                    lock = object.getLock()
                })
            end

            -- Put the object away
            object.attachInvisibleHider('hide', true)
            chapterBag.putObject(object)
        end

        -- Then put the chapter bag into the shipbook bag
        getObjectFromGUID(ShipBook.SHIPBOOK_BAG).putObject(chapterBag)
    end
end

function ShipBook.globalSetup(chapter)
    if ShipBook.current_chapter == chapter then return end

    -- Hide existing bags
    ShipBook.cleanupExistingChapter()

    -- Change the chapter and get the bag
    ShipBook.current_chapter = chapter

    local shipbookBag = getObjectFromGUID(ShipBook.SHIPBOOK_BAG)
    local chapterBag = shipbookBag.takeObject({
        position          = ShipBook.TEMPORARY_BAG_LOCATION,
        callback_function = function(obj) obj.setLock(true) end,
        smooth            = false,
        guid              = ShipBook.CHAPTERS[chapter].bag,
    })

    chapterBag.attachInvisibleHider('hide', ShipBook.HIDE_STORAGE_BAGS)
    chapterBag.getComponent("AudioSource").set('mute', ShipBook.HIDE_STORAGE_BAGS)

    if ShipBook.CHAPTERS[chapter].mainBoard ~= '' then
        local mainBoard = chapterBag.takeObject({
            position          = ShipBook.MAIN_BOARD_LOCATION,
            rotation          = {0, 180, 0},
            -- TODO: Consider adding obj.interactable = false, but you can't ALT zoom anymore...
            callback_function = function(obj) obj.setLock(true) end,
            smooth            = false,
            guid              = ShipBook.CHAPTERS[chapter].mainBoard,
        })

        for _, saved in ipairs(ShipBook.CHAPTERS[chapter].savedPositions) do
            chapterBag.takeObject({
                -- HACK: Can also use mainBoard.positionToWorld() to save it relative to the main board.
                position          = saved.position,
                rotation          = saved.rotation,
                callback_function = function(obj)
                    obj.setLock(saved.lock)
                end,
                smooth            = false,
                guid              = saved.guid,
            })
        end

        -- Move the camera to the main board
        for _, player in ipairs(Player.getPlayers()) do
            player.lookAt({ position = mainBoard.getPosition(), pitch = 90, distance = ShipBook.CHAPTERS[chapter].cameraDistance or 30 })
        end
    end
end

function ShipBook.setupResuming()
end

function ShipBook.setupBridge()
end

function ShipBook.setupStarmap()
    getObjectFromGUID(ShipBook.SCANNER).registerCollisions()
end

function ShipBook.setupShipFacilities()
end

function ShipBook.setupResearch()
end

function ShipBook.setupProduction()
end

function ShipBook.setupBarracks()
end

function ShipBook.setupSituationRoom()
end

function ShipBook.setupHangar()
end

function ShipBook.setupExploration()
end

function ShipBook.setupLeaving()
end

function ShipBook.setupDocking()
end

function ShipBook.setupDebriefing()
end

function ShipBook.setupUnloading()
end

function ShipBook.setupMedbay()
end

function ShipBook.setupMemorialWall()
end

function ShipBook.setupSavePoint()
end

-- pos1 = +0.63
-- pos2 = +1.92
-- pos3 = +3.24
-- pos4 = +5.19
function ShipBook.setupScannerCard(registered_object, info)
    log('Collision.')
    if info.collision_object.hasTag('landingCard') and registered_object.getGUID() == ShipBook.SCANNER 
        and not ShipBook.scanner_in_use then
        log('Setting up the scanner.')

        ShipBook.scanner_in_use = 1
        local cardDeltas = {
            0.63,
            1.92,
            3.24,
            5.19
        }

        registered_object.setRotation({0.00, 180.00, 0.00})
        info.collision_object.setLock(true)
        info.collision_object.setRotationSmooth({0.00, 180.00, 0.00})

        local position = Vector(registered_object.getPosition())
        position.y = position.y - 0.02
        position.z = position.z + cardDeltas[ShipBook.scanner_in_use]
        info.collision_object.setPositionSmooth(position)

        registered_object.createButton({
            click_function = 'nextScannerStep',
            function_owner = self,
            label          = 'Scan',
            position       = {-1, 0.2, 1.5},
            scale          = {1/registered_object.getScale().x, 1/registered_object.getScale().y, 1/registered_object.getScale().z},
            width          = 900,
            height         = 350,
            font_size      = 280,
        })

        registered_object.createButton({
            click_function = 'revealScanner',
            function_owner = self,
            label          = 'Reveal',
            position       = {1, 0.2, 1.5},
            scale          = {1/registered_object.getScale().x, 1/registered_object.getScale().y, 1/registered_object.getScale().z},
            width          = 1000,
            height         = 350,
            font_size      = 280,
        })

        Global.setVar('nextScannerStep', function(obj)
            if ShipBook.scanner_in_use < #cardDeltas then
                ShipBook.scanner_in_use = ShipBook.scanner_in_use + 1

                local position = Vector(registered_object.getPosition())
                position.y = position.y - 0.02
                position.z = position.z + cardDeltas[ShipBook.scanner_in_use]
                info.collision_object.setPositionSmooth(position)
            end
        end)

        Global.setVar('revealScanner', function(obj)
            registered_object.setRotation({0.00, 180.00, 180.00})
            registered_object.clearButtons()

            info.collision_object.setRotation({0.00, 180.00, 180.00})
            info.collision_object.setLock(false)
            ShipBook.scanner_in_use = nil
            getObjectFromGUID(ShipBook.SCANNER).unregisterCollisions()
        end)
    end
end

function ShipBook.save()
    local flatData = {
        scanner_in_use = ShipBook.scanner_in_use,
        saved_positions = {}
    }

    for name, chapter in pairs(ShipBook.CHAPTERS) do
        flatData.saved_positions[name] = chapter.savedPositions
    end

    return flatData
end

------------------------------------------------------

return {
    init = ShipBook.init,
    save = ShipBook.save
}