local Ui = {}
Ui.__index = Ui

local Constants = require('Constants')
local Log = require('Log').ForModule('Ui', Constants.ERROR)

------------------------------------------------------

Ui.SCALE = '0.1 0.1'
Ui.INVISIBLE_COLORS = '#00000000|#00000088|#00000088|#00000000'

------------------------------------------------------

function Ui.init()
    Ui.root = {}
    Ui.root.attributes = {
        id = 'root'
    }
    Ui.root.children = Global.UI.getXmlTable()
    Ui.root.object = Global
    Ui.root.createElement = Ui.createElementOnGlobal
    Ui.rootPerObject = {}
    setmetatable(Ui.root, Ui)
end

-- Create a new root to keep everything on global but based on a specific object
function Ui.createRootOnObject(id, object, z)
    assert(id ~= nil and 'string' == type(id))
    assert(object ~= nil and 'userdata' == type(object))
    assert(z ~= nil and 'number' == type(z))

    local objectRoot = Ui.rootPerObject[object]

    if objectRoot == nil then
        objectRoot = {
            object = object,
            z = -10 * z,
            rotation = '0 0 180', -- It's putting everything upside down otherwise
            scale = Ui.SCALE,
            children = object.UI.getXmlTable(),
            attributes = {
                id = id
            },
            createElement = Ui.createElementOnObject
        }

        setmetatable(objectRoot, Ui)
        Ui.rootPerObject[object] = objectRoot
    end

    return objectRoot
end

function Ui:createElementOnGlobal(tag, params)
    assert(tag ~= nil and 'string' == type(tag))
    assert(params.id ~= nil and 'string' == type(params.id))
    assert(params.x == nil or 'number' == type(params.x))
    assert(params.y == nil or 'number' == type(params.y))
    assert(params.width == nil or 'number' == type(params.width))
    assert(params.height == nil or 'number' == type(params.height))
    assert(params.active == nil or 'boolean' == type(params.active))

    local element = {
        tag = tag,
        object = self.object,
        createElement = self.createElement,
        attributes = {
            id = params.id,
            offsetXY = (params.x or 0) .. ' ' .. (params.y or 0),
            width = params.width or '100%',
            height = params.height or '100%',
            -- scale = Ui.SCALE,
            rectAlignment = params.rectAlignment or 'UpperLeft',
            active = params.active == nil or params.active,
            showAnimation = 'FadeIn',
            hideAnimation = 'FadeOut'
        },
        children = {}
    }

    -- Other parameters with no defined default
    if params.width ~= nil then
        element.attributes.preferredWidth = params.width
    end

    if params.height ~= nil then
        element.attributes.preferredHeight = params.height
    end

    table.insert(self.children, element)

    return element
end

function Ui:createElementOnObject(tag, params)
    assert(tag ~= nil and 'string' == type(tag))
    assert(params.id ~= nil and 'string' == type(params.id))
    assert(params.x == nil or 'number' == type(params.x))
    assert(params.y == nil or 'number' == type(params.y))
    assert(params.width == nil or 'number' == type(params.width))
    assert(params.height == nil or 'number' == type(params.height))
    assert(params.active == nil or 'boolean' == type(params.active))

    local element = {
        tag = tag,
        object = self.object,
        createElement = self.createElement,
        attributes = {
            id = params.id,
            position = (params.x or 0) .. ' ' .. (params.y or 0) .. ' ' .. (params.z or self.z),
            rotation = self.rotation,
            scale = self.scale,
            width = params.width or '100%',
            height = params.height or '100%',
            rectAlignment = params.rectAlignment or 'UpperLeft',
            active = params.active == nil or params.active,
            showAnimation = 'FadeIn',
            hideAnimation = 'FadeOut',
        },
        children = {}
    }

    -- Other parameters with no defined default
    if params.width ~= nil then
        element.attributes.preferredWidth = params.width
    end

    if params.height ~= nil then
        element.attributes.preferredHeight = params.height
    end

    table.insert(self.children, element)

    return element
end

function Ui:panel(params)
    local layout = self:createElement('Panel', params)
    layout.z = self.z
    layout.rotation = '0 0 0'
    layout.scale = self.scale
    layout.attributes.childForceExpandHeight = 'false'

    setmetatable(layout, Ui)

    return layout
end

function Ui:verticalLayout(params)
    assert(params.spacing == nil or 'number' == type(params.spacing))

    local layout = self:createElement('VerticalLayout', params)
    layout.z = self.z
    layout.rotation = '0 0 0'
    layout.scale = self.scale
    -- layout.attributes.childForceExpandWidth = false
    -- layout.attributes.childForceExpandHeight = false

    if params.spacing ~= nil then
        layout.attributes.spacing = params.spacing
    end

    setmetatable(layout, Ui)

    return layout
end

function Ui:horizontalLayout(params)
    assert(params.spacing == nil or 'number' == type(params.spacing))

    local layout = self:createElement('HorizontalLayout', params)
    layout.z = self.z
    layout.rotation = '0 0 0'
    layout.scale = self.scale
    -- layout.attributes.childForceExpandWidth = false
    -- layout.attributes.childForceExpandHeight = false

    if params.spacing ~= nil then
        layout.attributes.spacing = params.spacing
    end

    setmetatable(layout, Ui)

    return layout
end

function Ui:gridLayout(params)
    assert(params.spacing == nil or 'number' == type(params.spacing))
    assert(params.constraint == nil or 'string' == type(params.constraint))
    assert(params.constraintCout == nil or 'number' == type(params.constraintCount))

    local layout = self:createElement('GridLayout', params)
    layout.z = self.z
    layout.rotation = '0 0 0'
    layout.scale = self.scale

    if params.spacing ~= nil then
        layout.attributes.spacing = params.spacing
    end
    
    if params.constraint ~= nil then
        layout.attributes.constraint = params.constraint
    end

    if params.constraintCount ~= nil then
        layout.attributes.constraintCount = params.constraintCount
    end

    setmetatable(layout, Ui)

    return layout
end

function Ui:toggleGroup(params)
    local toggleGroup = self:createElement('ToggleGroup', params)
    toggleGroup.z = self.z
    -- toggleGroup.rotation = '0 0 0'
    toggleGroup.scale = self.scale

    setmetatable(toggleGroup, Ui)

    return toggleGroup
end

function Ui:toggle(params)
    assert(params.text == nil or 'string' == type(params.text))
    assert(params.fontSize == nil or 'number' == type(params.fontSize))
    assert(params.toggleHeight == nil or 'number' == type(params.toggleHeight))
    assert(params.toggleWidth == nil or 'number' == type(params.toggleWidth))

    local toggle = self:createElement('Toggle', params)
    toggle.z = self.z
    -- toggle.rotation = '0 0 0'
    toggle.scale = self.scale

    if params.text ~= nil then
        toggle.attributes.text = params.text
    end

    if params.fontSize ~= nil then
        toggle.attributes.fontSize = params.fontSize
    end

    if params.toggleHeight ~= nil then
        toggle.attributes.toggleHeight = params.toggleHeight
    end

    if params.toggleWidth ~= nil then
        toggle.attributes.toggleWidth = params.toggleWidth
    end

    setmetatable(toggle, Ui)
    toggle:registerOnValueChanged(params.onValueChanged)

    return toggle
end

function Ui:toggleButton(params)
    assert(params.text == nil or 'string' == type(params.text))
    assert(params.fontSize == nil or 'number' == type(params.fontSize))

    local toggle = self:createElement('ToggleButton', params)
    toggle.z = self.z
    -- toggle.rotation = '0 0 0'
    toggle.scale = self.scale
    
    if params.text ~= nil then
        toggle.attributes.text = params.text
    end

    if params.fontSize ~= nil then
        toggle.attributes.fontSize = params.fontSize
    end

    setmetatable(toggle, Ui)
    toggle:registerOnValueChanged(params.onValueChanged)

    return toggle
end

function Ui:dropdown(params)
    local dropdown = self:createElement('Dropdown', params)
    dropdown.z = self.z
    -- dropdown.rotation = '0 0 0'
    dropdown.scale = self.scale

    setmetatable(dropdown, Ui)

    return dropdown
end

function Ui:option(params)
    assert(params.value ~= nil and 'string' == type(params.value))

    local option = self:createElement('Option', params)
    option.z = self.z
    -- option.rotation = '0 0 0'
    option.scale = self.scale
    option.attributes.value = params.value

    setmetatable(option, Ui)

    return option
end

function Ui:button(params)
    assert(params.text == nil or 'string' == type(params.text))
    assert(params.fontSize == nil or 'number' == type(params.fontSize))

    local button = self:createElement('Button', params)
    button.z = self.z
    -- button.rotation = '0 0 0'
    button.scale = self.scale

    if params.text ~= nil then
        button.attributes.text = params.text
    end

    if params.fontSize ~= nil then
        button.attributes.fontSize = params.fontSize
    end

    setmetatable(button, Ui)
    button:registerOnClick(params.onClick)

    return button
end

function Ui:text(params)
    assert(params.text ~= nil and 'string' == type(params.text))
    assert(params.fontSize == nil or 'number' == type(params.fontSize))

    local text = self:createElement('Text', params)
    text.z = self.z
    -- text.rotation = '0 0 0'
    text.scale = self.scale
    text.attributes.text = params.text

    if params.fontSize ~= nil then
        text.attributes.fontSize = params.fontSize
    end
    
    setmetatable(text, Ui)
    text:registerOnClick(params.onClick)

    return text
end

function Ui:input(params)
    assert(params.text ~= nil and 'string' == type(params.text))
    assert(params.fontSize == nil or 'number' == type(params.fontSize))

    local input = self:createElement('InputField', params)
    input.z = self.z
    -- input.rotation = '0 0 0'
    input.scale = self.scale
    input.attributes.text = params.text

    if params.fontSize ~= nil then
        input.attributes.fontSize = params.fontSize
    end

    setmetatable(input, Ui)
    input:registerOnValueChanged(params.onValueChanged)

    return input
end

function Ui:image(params)
    assert(params.image ~= nil and 'string' == type(params.image))

    local image = self:createElement('Image', params)
    image.z = self.z
    -- image.rotation = '0 0 0'
    image.scale = self.scale
    image.attributes.image = params.image
    image.attributes.raycastTarget = true

    setmetatable(image, Ui)
    image:registerOnClick(params.onClick)

    return image
end

-- Wait for the UI to not be loading
-- This can only be used when the element is currently displayed already (it shows the hiding animation)
function Ui:hide(id)
    Wait.condition(function()
        if not id or id == '' then
            self.object.UI.hide(self.attributes.id)
            self.attributes.active = false
        else
            if #self.children == 0 then return end

            -- Go through the children once
            for _, child in ipairs(self.children) do
                if child.attributes.id == id then
                    self.object.UI.hide(id)
                    child.attributes.active = false
                    return
                end
            end

            -- Otherwise recursivery go through the children
            for _, child in ipairs(self.children) do
                child:hide(id)
            end
        end
    end, function() 
        return not Ui.getRoot().object.UI.loading and not self.object.UI.loading 
    end, nil, nil)
end

-- Wait for the UI to not be loading
-- This can only be used when the element is displayed already (it shows the show animation)
function Ui:show(id)
    Wait.condition(function()
        if not id or id == '' then
            self.object.UI.show(self.attributes.id)
            self.attributes.active = true
        else
            if #self.children == 0 then return end

            -- Go through the children once
            for _, child in ipairs(self.children) do
                if child.attributes.id == id then
                    self.object.UI.show(id)
                    child.attributes.active = true
                    return
                end
            end

            -- Otherwise recursivery go through the children
            for _, child in ipairs(self.children) do
                child:show(id)
            end
        end
    end, function() 
        return not Ui.getRoot().object.UI.loading and not self.object.UI.loading 
    end, nil, nil)
end

function Ui.globalRefresh()
    Wait.condition(function()
        if #Ui.root.children > 0 then
            Ui.root.object.UI.setXmlTable(Ui.root.children)
        else
            Ui.root.object.UI.setXml('')
        end
    end, function() 
        return not Ui.root.object.UI.loading 
    end, nil, nil)

    -- This needs to wait until Ui.root isn't loading.
    -- I don't know why but it puts blank images otherwise...
    for _, root in pairs(Ui.rootPerObject) do
        Wait.condition(function()
            if #root.children > 0 then
                root.object.UI.setXmlTable(root.children)
            else
                root.object.UI.setXml('')
            end
        end, function() 
            return not Ui.root.object.UI.loading 
        end, nil, nil)
    end
end

function Ui:refresh()
    if #self.children > 0 then
        self.object.UI.setXmlTable(self.children)
    else
        self.object.UI.setXml('')
    end
end

function Ui:setAttribute(attribute, attType, value, nilAllowed)
    local id = self.attributes.id
    assert(attribute ~= nil and 'string' == type(attribute))
    assert(attType ~= nil and 'string' == type(attType))

    if nilAllowed then
        assert(value == nil or attType == type(value))
    else
        assert(value ~= nil and attType == type(value))
    end

    self.attributes[attribute] = value
    self.object.UI.setAttribute(id, attribute, value)
end

function Ui:setWidth(value) self:setAttribute('width', 'number', value ~= nil and value or '100%') end
function Ui:setHeight(value) self:setAttribute('height', 'number', value ~= nil and value or '100%') end
function Ui:setText(value) self:setAttribute('text', 'string', value ~= nil and tostring(value) or '') end
function Ui:setOffsetXY(offsetXY) self:setAttribute('offsetXY', 'string', offsetXY) end
function Ui:setActive(active) self:setAttribute('active', 'boolean', active) end
function Ui:setImage(value) self:setAttribute('image', 'string', value ~= nil and tostring(value) or '') end
function Ui:setIcon(value) self:setAttribute('icon', 'string', value ~= nil and tostring(value) or '') end

-- This doesn't need the setAttribute because we've already registeredOnClick initially, and that calls self.onClick instead of self.attributes.onClick
function Ui:setOnClick(onClick)
    assert(onClick == nil or 'function' == type(onClick))
    self.onClick = onClick
end

function Ui:setOnValueChanged(onValueChanged)
    assert(onValueChanged == nil or 'function' == type(onValueChanged))
    self.onValueChanged = onValueChanged
end

function Ui:registerOnClick(onClick)
    assert(onClick == nil or 'function' == type(onClick))

    -- Save the on click function
    self.onClick = onClick or function() end

    local onClickFunctionName = self.attributes.id.."_OnClick"
    Global.setVar(onClickFunctionName, function(player, mouseButton, id)
        self.onClick(player, mouseButton, id)
    end)
    self.attributes.onClick = "Global/"..onClickFunctionName
end

function Ui:registerOnValueChanged(onValueChanged)
    assert(onValueChanged == nil or 'function' == type(onValueChanged))

    -- Save the on click function
    self.onValueChanged = onValueChanged or function() end

    local onValueChangedFunctionName = self.attributes.id.."_onValueChanged"
    Global.setVar(onValueChangedFunctionName, function(player, isOn, id)
        self.onValueChanged(player, isOn, id)
    end)
    self.attributes.onValueChanged = "Global/"..onValueChangedFunctionName
end

function Ui.getRoot()
    return Ui.root
end

function Ui.getRootPerObject(object)
    if not object or object == Global then
        return Ui.getRoot()
    else
        return Ui.rootPerObject[object]
    end
end

function Ui:wipe()
    self.children = {}
    self.attributes = {}
    self:refresh()
end

function Ui:fullWipe()
    self:wipe()

    for _, root in pairs(self.rootPerObject) do
        root:wipe()
    end
end

------------------------------------------------------

return {
    init = Ui.init,
    globalRefresh = Ui.globalRefresh,
    getRoot = Ui.getRoot,
    getRootPerObject = Ui.getRootPerObject,
    createRootOnObject = Ui.createRootOnObject
}
